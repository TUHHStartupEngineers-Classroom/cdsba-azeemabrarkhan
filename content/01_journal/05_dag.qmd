---
title: "Directed Acyclic Graphs"
---

```{r}
#| include: false
library(dplyr)
library(tidyverse)
library(ggplot2)
library(dagitty)
library(ggdag)
```

# 1
* Think about example from previous chapter (parking spots) and draw the DAG.

```{r}
# Z = location of the store
# D = No. of parking spots as exposure
# Y = Sales

store_parking_model <- 'dag {
bb="0,0,1,1"
Z [pos="0.5,0.5"]
D [exposure,pos="0,0"]
Y [outcome,pos="1,0"]
Z -> D
Z -> Y
D -> Y
}
'
# draw DAG
ggdag_status(store_parking_model) +
  theme_dag_gray()+
  geom_dag_edges(edge_color = "black")
```
Z = Location of the store  
D = No. of parking spots as an exposure  
Y = Sales as an outcome  

The location of the store can effect both the number of available parking spots and sales. Stores in the city center might be subjected to more sales but with no parking spots, whereas, stores outside the city center might have low sales but with available parking spots. Location is acting as a confounder here.

```{r}
# find all paths
paths(store_parking_model)
```
There are 2 paths and both are open

```{r}
# plot individual paths
ggdag_paths(store_parking_model) +
  theme_dag_gray()
```

```{r}
# find all nodes that need to be adjusted
adjustmentSets(store_parking_model)
```
Node-Z must be adjusted as it is acting as a confounder.

```{r}
ggdag_adjustment_set(store_parking_model, shadow = T) +
  theme_dag_gray() +
  geom_dag_edges(edge_color = "black")
```
The adjusted node and the adjusted edges are represented in the above figure.

# 2
* Load the data file customer_sat.rds. A company sells a SaaS (Software as a service) to business clients that chose to subscribe to one of the three subscription levels, Starter, Premium or Elite, which provide different features at different price points (more storage and other capabilities). Starter has the least functionality, while Elite includes the most features. Now imagine, you are working as an analyst for that company and are asked to examine the relationship between follow-up calls to the clients and their satisfaction with the product and service. Follow-up calls are voluntary and are just to help the client with possible problems and so on. Satisfaction is measured on a weekly basis by surveying the clients. In the data, you find three variables: satisfaction, follow_ups and subscription. Perform the following steps:

    + regress satisfaction on follow_ups

    + regress satisfaction on follow_ups and account for subscription
    
```{r}
#Load data and print summary
customers <- readRDS("../data/customer_sat.rds")
customers$subscription <- as.factor(customers$subscription)
summary(customers)
```

```{r}
#regress satisfaction on follow_ups
customer_model_limited <- lm(satisfaction ~ follow_ups, data = customers)
summary(customer_model_limited)
```


```{r}
#regress satisfaction on follow_ups and account for subscription
customer_model <- lm(satisfaction ~ ., data = customers)
summary(customer_model)
```
# 3
* Compare the coefficients and find a possible explanation.

The estimate for the limited model is less than 0 which represents the negative correlation between the follow_ups and the satisfaction level, which seems erroneous. We need to include the subscription class as well and build the complete model.

However, in case of complete model, all the estimates are greater than zero and shows positive correlation. In other words, the satisfaction increases with the increase in the number of follow ups.

# 4
* Plot the data. Youâ€™ll find a similar plot in this chapter, that you can copy some lines from.

We can ignore the factor variable of subscription type in the first plot while taking it into account in the second plot to compare the differences and to prove the above explanation.
```{r}
customers_plot_not_cond <- ggplot(customers, aes(x = follow_ups, y = satisfaction)) +
  geom_point(alpha = .8) +
  stat_smooth(method = "lm", se = F)

customers_plot_cond <- ggplot(customers, aes(x = follow_ups, y = satisfaction, color = subscription)) +
  geom_point(alpha = .8) +
  stat_smooth(method = "lm", se = F)

customers_plot_not_cond
customers_plot_cond
```